package org.itcgae.siga.db.mappers;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;
import org.itcgae.siga.db.entities.EnvEntradaEnviosExample;
import org.itcgae.siga.db.entities.EnvEntradaEnviosExample.Criteria;
import org.itcgae.siga.db.entities.EnvEntradaEnviosExample.Criterion;
import org.itcgae.siga.db.entities.EnvEntradaEnviosWithBLOBs;

public class EnvEntradaEnviosSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String countByExample(EnvEntradaEnviosExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("ENV_ENTRADA_ENVIOS");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String deleteByExample(EnvEntradaEnviosExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("ENV_ENTRADA_ENVIOS");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String insertSelective(EnvEntradaEnviosWithBLOBs record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("ENV_ENTRADA_ENVIOS");
        
        if (record.getIdinstitucion() != null) {
            sql.VALUES("IDINSTITUCION", "#{idinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdenvio() != null) {
            sql.VALUES("IDENVIO", "#{idenvio,jdbcType=DECIMAL}");
        }
        
        if (record.getAsunto() != null) {
            sql.VALUES("ASUNTO", "#{asunto,jdbcType=VARCHAR}");
        }
        
        if (record.getIdtipointercambiotelematico() != null) {
            sql.VALUES("IDTIPOINTERCAMBIOTELEMATICO", "#{idtipointercambiotelematico,jdbcType=VARCHAR}");
        }
        
        if (record.getFechapeticion() != null) {
            sql.VALUES("FECHAPETICION", "#{fechapeticion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getIdestado() != null) {
            sql.VALUES("IDESTADO", "#{idestado,jdbcType=DECIMAL}");
        }
        
        if (record.getIdentintercambio() != null) {
            sql.VALUES("IDENTINTERCAMBIO", "#{identintercambio,jdbcType=VARCHAR}");
        }
        
        if (record.getIdentintercambiotrel() != null) {
            sql.VALUES("IDENTINTERCAMBIOTREL", "#{identintercambiotrel,jdbcType=VARCHAR}");
        }
        
        if (record.getFecharespuesta() != null) {
            sql.VALUES("FECHARESPUESTA", "#{fecharespuesta,jdbcType=TIMESTAMP}");
        }
        
        if (record.getNecesitarespuesta() != null) {
            sql.VALUES("NECESITARESPUESTA", "#{necesitarespuesta,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.VALUES("FECHAMODIFICACION", "#{fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.VALUES("USUMODIFICACION", "#{usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdenviorel() != null) {
            sql.VALUES("IDENVIOREL", "#{idenviorel,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteId() != null) {
            sql.VALUES("REMITENTE_ID", "#{remitenteId,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteIdinstitucion() != null) {
            sql.VALUES("REMITENTE_IDINSTITUCION", "#{remitenteIdinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteTipo() != null) {
            sql.VALUES("REMITENTE_TIPO", "#{remitenteTipo,jdbcType=CHAR}");
        }
        
        if (record.getIdcabecera() != null) {
            sql.VALUES("IDCABECERA", "#{idcabecera,jdbcType=VARCHAR}");
        }
        
        if (record.getIdenviorelprogramado() != null) {
            sql.VALUES("IDENVIORELPROGRAMADO", "#{idenviorelprogramado,jdbcType=DECIMAL}");
        }
        
        if (record.getFechalexnet() != null) {
            sql.VALUES("FECHALEXNET", "#{fechalexnet,jdbcType=TIMESTAMP}");
        }
        
        if (record.getComisionajg() != null) {
            sql.VALUES("COMISIONAJG", "#{comisionajg,jdbcType=DECIMAL}");
        }
        
        if (record.getXml() != null) {
            sql.VALUES("XML", "#{xml,jdbcType=CLOB}");
        }
        
        if (record.getLogerror() != null) {
            sql.VALUES("LOGERROR", "#{logerror,jdbcType=CLOB}");
        }
        
        if (record.getPdf() != null) {
            sql.VALUES("PDF", "#{pdf,jdbcType=BLOB}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String selectByExampleWithBLOBs(EnvEntradaEnviosExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("IDINSTITUCION");
        } else {
            sql.SELECT("IDINSTITUCION");
        }
        sql.SELECT("IDENVIO");
        sql.SELECT("ASUNTO");
        sql.SELECT("IDTIPOINTERCAMBIOTELEMATICO");
        sql.SELECT("FECHAPETICION");
        sql.SELECT("IDESTADO");
        sql.SELECT("IDENTINTERCAMBIO");
        sql.SELECT("IDENTINTERCAMBIOTREL");
        sql.SELECT("FECHARESPUESTA");
        sql.SELECT("NECESITARESPUESTA");
        sql.SELECT("FECHAMODIFICACION");
        sql.SELECT("USUMODIFICACION");
        sql.SELECT("IDENVIOREL");
        sql.SELECT("REMITENTE_ID");
        sql.SELECT("REMITENTE_IDINSTITUCION");
        sql.SELECT("REMITENTE_TIPO");
        sql.SELECT("IDCABECERA");
        sql.SELECT("IDENVIORELPROGRAMADO");
        sql.SELECT("FECHALEXNET");
        sql.SELECT("COMISIONAJG");
        sql.SELECT("XML");
        sql.SELECT("LOGERROR");
        sql.SELECT("PDF");
        sql.FROM("ENV_ENTRADA_ENVIOS");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String selectByExample(EnvEntradaEnviosExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("IDINSTITUCION");
        } else {
            sql.SELECT("IDINSTITUCION");
        }
        sql.SELECT("IDENVIO");
        sql.SELECT("ASUNTO");
        sql.SELECT("IDTIPOINTERCAMBIOTELEMATICO");
        sql.SELECT("FECHAPETICION");
        sql.SELECT("IDESTADO");
        sql.SELECT("IDENTINTERCAMBIO");
        sql.SELECT("IDENTINTERCAMBIOTREL");
        sql.SELECT("FECHARESPUESTA");
        sql.SELECT("NECESITARESPUESTA");
        sql.SELECT("FECHAMODIFICACION");
        sql.SELECT("USUMODIFICACION");
        sql.SELECT("IDENVIOREL");
        sql.SELECT("REMITENTE_ID");
        sql.SELECT("REMITENTE_IDINSTITUCION");
        sql.SELECT("REMITENTE_TIPO");
        sql.SELECT("IDCABECERA");
        sql.SELECT("IDENVIORELPROGRAMADO");
        sql.SELECT("FECHALEXNET");
        sql.SELECT("COMISIONAJG");
        sql.FROM("ENV_ENTRADA_ENVIOS");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        EnvEntradaEnviosWithBLOBs record = (EnvEntradaEnviosWithBLOBs) parameter.get("record");
        EnvEntradaEnviosExample example = (EnvEntradaEnviosExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("ENV_ENTRADA_ENVIOS");
        
        if (record.getIdinstitucion() != null) {
            sql.SET("IDINSTITUCION = #{record.idinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdenvio() != null) {
            sql.SET("IDENVIO = #{record.idenvio,jdbcType=DECIMAL}");
        }
        
        if (record.getAsunto() != null) {
            sql.SET("ASUNTO = #{record.asunto,jdbcType=VARCHAR}");
        }
        
        if (record.getIdtipointercambiotelematico() != null) {
            sql.SET("IDTIPOINTERCAMBIOTELEMATICO = #{record.idtipointercambiotelematico,jdbcType=VARCHAR}");
        }
        
        if (record.getFechapeticion() != null) {
            sql.SET("FECHAPETICION = #{record.fechapeticion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getIdestado() != null) {
            sql.SET("IDESTADO = #{record.idestado,jdbcType=DECIMAL}");
        }
        
        if (record.getIdentintercambio() != null) {
            sql.SET("IDENTINTERCAMBIO = #{record.identintercambio,jdbcType=VARCHAR}");
        }
        
        if (record.getIdentintercambiotrel() != null) {
            sql.SET("IDENTINTERCAMBIOTREL = #{record.identintercambiotrel,jdbcType=VARCHAR}");
        }
        
        if (record.getFecharespuesta() != null) {
            sql.SET("FECHARESPUESTA = #{record.fecharespuesta,jdbcType=TIMESTAMP}");
        }
        
        if (record.getNecesitarespuesta() != null) {
            sql.SET("NECESITARESPUESTA = #{record.necesitarespuesta,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.SET("FECHAMODIFICACION = #{record.fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.SET("USUMODIFICACION = #{record.usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdenviorel() != null) {
            sql.SET("IDENVIOREL = #{record.idenviorel,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteId() != null) {
            sql.SET("REMITENTE_ID = #{record.remitenteId,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteIdinstitucion() != null) {
            sql.SET("REMITENTE_IDINSTITUCION = #{record.remitenteIdinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteTipo() != null) {
            sql.SET("REMITENTE_TIPO = #{record.remitenteTipo,jdbcType=CHAR}");
        }
        
        if (record.getIdcabecera() != null) {
            sql.SET("IDCABECERA = #{record.idcabecera,jdbcType=VARCHAR}");
        }
        
        if (record.getIdenviorelprogramado() != null) {
            sql.SET("IDENVIORELPROGRAMADO = #{record.idenviorelprogramado,jdbcType=DECIMAL}");
        }
        
        if (record.getFechalexnet() != null) {
            sql.SET("FECHALEXNET = #{record.fechalexnet,jdbcType=TIMESTAMP}");
        }
        
        if (record.getComisionajg() != null) {
            sql.SET("COMISIONAJG = #{record.comisionajg,jdbcType=DECIMAL}");
        }
        
        if (record.getXml() != null) {
            sql.SET("XML = #{record.xml,jdbcType=CLOB}");
        }
        
        if (record.getLogerror() != null) {
            sql.SET("LOGERROR = #{record.logerror,jdbcType=CLOB}");
        }
        
        if (record.getPdf() != null) {
            sql.SET("PDF = #{record.pdf,jdbcType=BLOB}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("ENV_ENTRADA_ENVIOS");
        
        sql.SET("IDINSTITUCION = #{record.idinstitucion,jdbcType=DECIMAL}");
        sql.SET("IDENVIO = #{record.idenvio,jdbcType=DECIMAL}");
        sql.SET("ASUNTO = #{record.asunto,jdbcType=VARCHAR}");
        sql.SET("IDTIPOINTERCAMBIOTELEMATICO = #{record.idtipointercambiotelematico,jdbcType=VARCHAR}");
        sql.SET("FECHAPETICION = #{record.fechapeticion,jdbcType=TIMESTAMP}");
        sql.SET("IDESTADO = #{record.idestado,jdbcType=DECIMAL}");
        sql.SET("IDENTINTERCAMBIO = #{record.identintercambio,jdbcType=VARCHAR}");
        sql.SET("IDENTINTERCAMBIOTREL = #{record.identintercambiotrel,jdbcType=VARCHAR}");
        sql.SET("FECHARESPUESTA = #{record.fecharespuesta,jdbcType=TIMESTAMP}");
        sql.SET("NECESITARESPUESTA = #{record.necesitarespuesta,jdbcType=DECIMAL}");
        sql.SET("FECHAMODIFICACION = #{record.fechamodificacion,jdbcType=TIMESTAMP}");
        sql.SET("USUMODIFICACION = #{record.usumodificacion,jdbcType=DECIMAL}");
        sql.SET("IDENVIOREL = #{record.idenviorel,jdbcType=DECIMAL}");
        sql.SET("REMITENTE_ID = #{record.remitenteId,jdbcType=DECIMAL}");
        sql.SET("REMITENTE_IDINSTITUCION = #{record.remitenteIdinstitucion,jdbcType=DECIMAL}");
        sql.SET("REMITENTE_TIPO = #{record.remitenteTipo,jdbcType=CHAR}");
        sql.SET("IDCABECERA = #{record.idcabecera,jdbcType=VARCHAR}");
        sql.SET("IDENVIORELPROGRAMADO = #{record.idenviorelprogramado,jdbcType=DECIMAL}");
        sql.SET("FECHALEXNET = #{record.fechalexnet,jdbcType=TIMESTAMP}");
        sql.SET("COMISIONAJG = #{record.comisionajg,jdbcType=DECIMAL}");
        sql.SET("XML = #{record.xml,jdbcType=CLOB}");
        sql.SET("LOGERROR = #{record.logerror,jdbcType=CLOB}");
        sql.SET("PDF = #{record.pdf,jdbcType=BLOB}");
        
        EnvEntradaEnviosExample example = (EnvEntradaEnviosExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("ENV_ENTRADA_ENVIOS");
        
        sql.SET("IDINSTITUCION = #{record.idinstitucion,jdbcType=DECIMAL}");
        sql.SET("IDENVIO = #{record.idenvio,jdbcType=DECIMAL}");
        sql.SET("ASUNTO = #{record.asunto,jdbcType=VARCHAR}");
        sql.SET("IDTIPOINTERCAMBIOTELEMATICO = #{record.idtipointercambiotelematico,jdbcType=VARCHAR}");
        sql.SET("FECHAPETICION = #{record.fechapeticion,jdbcType=TIMESTAMP}");
        sql.SET("IDESTADO = #{record.idestado,jdbcType=DECIMAL}");
        sql.SET("IDENTINTERCAMBIO = #{record.identintercambio,jdbcType=VARCHAR}");
        sql.SET("IDENTINTERCAMBIOTREL = #{record.identintercambiotrel,jdbcType=VARCHAR}");
        sql.SET("FECHARESPUESTA = #{record.fecharespuesta,jdbcType=TIMESTAMP}");
        sql.SET("NECESITARESPUESTA = #{record.necesitarespuesta,jdbcType=DECIMAL}");
        sql.SET("FECHAMODIFICACION = #{record.fechamodificacion,jdbcType=TIMESTAMP}");
        sql.SET("USUMODIFICACION = #{record.usumodificacion,jdbcType=DECIMAL}");
        sql.SET("IDENVIOREL = #{record.idenviorel,jdbcType=DECIMAL}");
        sql.SET("REMITENTE_ID = #{record.remitenteId,jdbcType=DECIMAL}");
        sql.SET("REMITENTE_IDINSTITUCION = #{record.remitenteIdinstitucion,jdbcType=DECIMAL}");
        sql.SET("REMITENTE_TIPO = #{record.remitenteTipo,jdbcType=CHAR}");
        sql.SET("IDCABECERA = #{record.idcabecera,jdbcType=VARCHAR}");
        sql.SET("IDENVIORELPROGRAMADO = #{record.idenviorelprogramado,jdbcType=DECIMAL}");
        sql.SET("FECHALEXNET = #{record.fechalexnet,jdbcType=TIMESTAMP}");
        sql.SET("COMISIONAJG = #{record.comisionajg,jdbcType=DECIMAL}");
        
        EnvEntradaEnviosExample example = (EnvEntradaEnviosExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    public String updateByPrimaryKeySelective(EnvEntradaEnviosWithBLOBs record) {
        SQL sql = new SQL();
        sql.UPDATE("ENV_ENTRADA_ENVIOS");
        
        if (record.getAsunto() != null) {
            sql.SET("ASUNTO = #{asunto,jdbcType=VARCHAR}");
        }
        
        if (record.getIdtipointercambiotelematico() != null) {
            sql.SET("IDTIPOINTERCAMBIOTELEMATICO = #{idtipointercambiotelematico,jdbcType=VARCHAR}");
        }
        
        if (record.getFechapeticion() != null) {
            sql.SET("FECHAPETICION = #{fechapeticion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getIdestado() != null) {
            sql.SET("IDESTADO = #{idestado,jdbcType=DECIMAL}");
        }
        
        if (record.getIdentintercambio() != null) {
            sql.SET("IDENTINTERCAMBIO = #{identintercambio,jdbcType=VARCHAR}");
        }
        
        if (record.getIdentintercambiotrel() != null) {
            sql.SET("IDENTINTERCAMBIOTREL = #{identintercambiotrel,jdbcType=VARCHAR}");
        }
        
        if (record.getFecharespuesta() != null) {
            sql.SET("FECHARESPUESTA = #{fecharespuesta,jdbcType=TIMESTAMP}");
        }
        
        if (record.getNecesitarespuesta() != null) {
            sql.SET("NECESITARESPUESTA = #{necesitarespuesta,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.SET("FECHAMODIFICACION = #{fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.SET("USUMODIFICACION = #{usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdenviorel() != null) {
            sql.SET("IDENVIOREL = #{idenviorel,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteId() != null) {
            sql.SET("REMITENTE_ID = #{remitenteId,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteIdinstitucion() != null) {
            sql.SET("REMITENTE_IDINSTITUCION = #{remitenteIdinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getRemitenteTipo() != null) {
            sql.SET("REMITENTE_TIPO = #{remitenteTipo,jdbcType=CHAR}");
        }
        
        if (record.getIdcabecera() != null) {
            sql.SET("IDCABECERA = #{idcabecera,jdbcType=VARCHAR}");
        }
        
        if (record.getIdenviorelprogramado() != null) {
            sql.SET("IDENVIORELPROGRAMADO = #{idenviorelprogramado,jdbcType=DECIMAL}");
        }
        
        if (record.getFechalexnet() != null) {
            sql.SET("FECHALEXNET = #{fechalexnet,jdbcType=TIMESTAMP}");
        }
        
        if (record.getComisionajg() != null) {
            sql.SET("COMISIONAJG = #{comisionajg,jdbcType=DECIMAL}");
        }
        
        if (record.getXml() != null) {
            sql.SET("XML = #{xml,jdbcType=CLOB}");
        }
        
        if (record.getLogerror() != null) {
            sql.SET("LOGERROR = #{logerror,jdbcType=CLOB}");
        }
        
        if (record.getPdf() != null) {
            sql.SET("PDF = #{pdf,jdbcType=BLOB}");
        }
        
        sql.WHERE("IDINSTITUCION = #{idinstitucion,jdbcType=DECIMAL}");
        sql.WHERE("IDENVIO = #{idenvio,jdbcType=DECIMAL}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.ENV_ENTRADA_ENVIOS
     *
     * @mbg.generated Mon Nov 26 12:11:01 CET 2018
     */
    protected void applyWhere(SQL sql, EnvEntradaEnviosExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}