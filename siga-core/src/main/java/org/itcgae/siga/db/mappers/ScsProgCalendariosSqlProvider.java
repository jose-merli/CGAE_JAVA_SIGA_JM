package org.itcgae.siga.db.mappers;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;
import org.itcgae.siga.db.entities.ScsProgCalendarios;
import org.itcgae.siga.db.entities.ScsProgCalendariosExample.Criteria;
import org.itcgae.siga.db.entities.ScsProgCalendariosExample.Criterion;
import org.itcgae.siga.db.entities.ScsProgCalendariosExample;

public class ScsProgCalendariosSqlProvider {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table USCGAE_INT.SCS_PROG_CALENDARIOS
	 * @mbg.generated  Thu Nov 10 14:15:19 CET 2022
	 */
	public String countByExample(ScsProgCalendariosExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("SCS_PROG_CALENDARIOS");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table USCGAE_INT.SCS_PROG_CALENDARIOS
	 * @mbg.generated  Thu Nov 10 14:15:19 CET 2022
	 */
	public String deleteByExample(ScsProgCalendariosExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("SCS_PROG_CALENDARIOS");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table USCGAE_INT.SCS_PROG_CALENDARIOS
	 * @mbg.generated  Thu Nov 10 14:15:19 CET 2022
	 */
	public String insertSelective(ScsProgCalendarios row) {
		SQL sql = new SQL();
		sql.INSERT_INTO("SCS_PROG_CALENDARIOS");
		if (row.getIdprogcalendario() != null) {
			sql.VALUES("IDPROGCALENDARIO", "#{idprogcalendario,jdbcType=NUMERIC}");
		}
		if (row.getIdconjuntoguardia() != null) {
			sql.VALUES("IDCONJUNTOGUARDIA", "#{idconjuntoguardia,jdbcType=NUMERIC}");
		}
		if (row.getIdinstitucion() != null) {
			sql.VALUES("IDINSTITUCION", "#{idinstitucion,jdbcType=NUMERIC}");
		}
		if (row.getFechaprogramacion() != null) {
			sql.VALUES("FECHAPROGRAMACION", "#{fechaprogramacion,jdbcType=TIMESTAMP}");
		}
		if (row.getFechacalinicio() != null) {
			sql.VALUES("FECHACALINICIO", "#{fechacalinicio,jdbcType=TIMESTAMP}");
		}
		if (row.getFechacalfin() != null) {
			sql.VALUES("FECHACALFIN", "#{fechacalfin,jdbcType=TIMESTAMP}");
		}
		if (row.getEstado() != null) {
			sql.VALUES("ESTADO", "#{estado,jdbcType=NUMERIC}");
		}
		if (row.getFechamodificacion() != null) {
			sql.VALUES("FECHAMODIFICACION", "#{fechamodificacion,jdbcType=TIMESTAMP}");
		}
		if (row.getUsumodificacion() != null) {
			sql.VALUES("USUMODIFICACION", "#{usumodificacion,jdbcType=NUMERIC}");
		}
		if (row.getIdficherocalendario() != null) {
			sql.VALUES("IDFICHEROCALENDARIO", "#{idficherocalendario,jdbcType=NUMERIC}");
		}
		if (row.getObservaciones() != null) {
			sql.VALUES("OBSERVACIONES", "#{observaciones,jdbcType=VARCHAR}");
		}
		if (row.getProcesandogeneracion() != null) {
			sql.VALUES("PROCESANDOGENERACION", "#{procesandogeneracion,jdbcType=NUMERIC}");
		}
		if (row.getLogProgramacionName() != null) {
			sql.VALUES("LOG_PROGRAMACION_NAME", "#{logProgramacionName,jdbcType=VARCHAR}");
		}
		if (row.getSoloGenerarVacio() != null) {
			sql.VALUES("SOLO_GENERAR_VACIO", "#{soloGenerarVacio,jdbcType=CHAR}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table USCGAE_INT.SCS_PROG_CALENDARIOS
	 * @mbg.generated  Thu Nov 10 14:15:19 CET 2022
	 */
	public String selectByExample(ScsProgCalendariosExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("IDPROGCALENDARIO");
		} else {
			sql.SELECT("IDPROGCALENDARIO");
		}
		sql.SELECT("IDCONJUNTOGUARDIA");
		sql.SELECT("IDINSTITUCION");
		sql.SELECT("FECHAPROGRAMACION");
		sql.SELECT("FECHACALINICIO");
		sql.SELECT("FECHACALFIN");
		sql.SELECT("ESTADO");
		sql.SELECT("FECHAMODIFICACION");
		sql.SELECT("USUMODIFICACION");
		sql.SELECT("IDFICHEROCALENDARIO");
		sql.SELECT("OBSERVACIONES");
		sql.SELECT("PROCESANDOGENERACION");
		sql.SELECT("LOG_PROGRAMACION_NAME");
		sql.SELECT("SOLO_GENERAR_VACIO");
		sql.FROM("SCS_PROG_CALENDARIOS");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table USCGAE_INT.SCS_PROG_CALENDARIOS
	 * @mbg.generated  Thu Nov 10 14:15:19 CET 2022
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		ScsProgCalendarios row = (ScsProgCalendarios) parameter.get("row");
		ScsProgCalendariosExample example = (ScsProgCalendariosExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("SCS_PROG_CALENDARIOS");
		if (row.getIdprogcalendario() != null) {
			sql.SET("IDPROGCALENDARIO = #{row.idprogcalendario,jdbcType=NUMERIC}");
		}
		if (row.getIdconjuntoguardia() != null) {
			sql.SET("IDCONJUNTOGUARDIA = #{row.idconjuntoguardia,jdbcType=NUMERIC}");
		}
		if (row.getIdinstitucion() != null) {
			sql.SET("IDINSTITUCION = #{row.idinstitucion,jdbcType=NUMERIC}");
		}
		if (row.getFechaprogramacion() != null) {
			sql.SET("FECHAPROGRAMACION = #{row.fechaprogramacion,jdbcType=TIMESTAMP}");
		}
		if (row.getFechacalinicio() != null) {
			sql.SET("FECHACALINICIO = #{row.fechacalinicio,jdbcType=TIMESTAMP}");
		}
		if (row.getFechacalfin() != null) {
			sql.SET("FECHACALFIN = #{row.fechacalfin,jdbcType=TIMESTAMP}");
		}
		if (row.getEstado() != null) {
			sql.SET("ESTADO = #{row.estado,jdbcType=NUMERIC}");
		}
		if (row.getFechamodificacion() != null) {
			sql.SET("FECHAMODIFICACION = #{row.fechamodificacion,jdbcType=TIMESTAMP}");
		}
		if (row.getUsumodificacion() != null) {
			sql.SET("USUMODIFICACION = #{row.usumodificacion,jdbcType=NUMERIC}");
		}
		if (row.getIdficherocalendario() != null) {
			sql.SET("IDFICHEROCALENDARIO = #{row.idficherocalendario,jdbcType=NUMERIC}");
		}
		if (row.getObservaciones() != null) {
			sql.SET("OBSERVACIONES = #{row.observaciones,jdbcType=VARCHAR}");
		}
		if (row.getProcesandogeneracion() != null) {
			sql.SET("PROCESANDOGENERACION = #{row.procesandogeneracion,jdbcType=NUMERIC}");
		}
		if (row.getLogProgramacionName() != null) {
			sql.SET("LOG_PROGRAMACION_NAME = #{row.logProgramacionName,jdbcType=VARCHAR}");
		}
		if (row.getSoloGenerarVacio() != null) {
			sql.SET("SOLO_GENERAR_VACIO = #{row.soloGenerarVacio,jdbcType=CHAR}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table USCGAE_INT.SCS_PROG_CALENDARIOS
	 * @mbg.generated  Thu Nov 10 14:15:19 CET 2022
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("SCS_PROG_CALENDARIOS");
		sql.SET("IDPROGCALENDARIO = #{row.idprogcalendario,jdbcType=NUMERIC}");
		sql.SET("IDCONJUNTOGUARDIA = #{row.idconjuntoguardia,jdbcType=NUMERIC}");
		sql.SET("IDINSTITUCION = #{row.idinstitucion,jdbcType=NUMERIC}");
		sql.SET("FECHAPROGRAMACION = #{row.fechaprogramacion,jdbcType=TIMESTAMP}");
		sql.SET("FECHACALINICIO = #{row.fechacalinicio,jdbcType=TIMESTAMP}");
		sql.SET("FECHACALFIN = #{row.fechacalfin,jdbcType=TIMESTAMP}");
		sql.SET("ESTADO = #{row.estado,jdbcType=NUMERIC}");
		sql.SET("FECHAMODIFICACION = #{row.fechamodificacion,jdbcType=TIMESTAMP}");
		sql.SET("USUMODIFICACION = #{row.usumodificacion,jdbcType=NUMERIC}");
		sql.SET("IDFICHEROCALENDARIO = #{row.idficherocalendario,jdbcType=NUMERIC}");
		sql.SET("OBSERVACIONES = #{row.observaciones,jdbcType=VARCHAR}");
		sql.SET("PROCESANDOGENERACION = #{row.procesandogeneracion,jdbcType=NUMERIC}");
		sql.SET("LOG_PROGRAMACION_NAME = #{row.logProgramacionName,jdbcType=VARCHAR}");
		sql.SET("SOLO_GENERAR_VACIO = #{row.soloGenerarVacio,jdbcType=CHAR}");
		ScsProgCalendariosExample example = (ScsProgCalendariosExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table USCGAE_INT.SCS_PROG_CALENDARIOS
	 * @mbg.generated  Thu Nov 10 14:15:19 CET 2022
	 */
	public String updateByPrimaryKeySelective(ScsProgCalendarios row) {
		SQL sql = new SQL();
		sql.UPDATE("SCS_PROG_CALENDARIOS");
		if (row.getIdconjuntoguardia() != null) {
			sql.SET("IDCONJUNTOGUARDIA = #{idconjuntoguardia,jdbcType=NUMERIC}");
		}
		if (row.getIdinstitucion() != null) {
			sql.SET("IDINSTITUCION = #{idinstitucion,jdbcType=NUMERIC}");
		}
		if (row.getFechaprogramacion() != null) {
			sql.SET("FECHAPROGRAMACION = #{fechaprogramacion,jdbcType=TIMESTAMP}");
		}
		if (row.getFechacalinicio() != null) {
			sql.SET("FECHACALINICIO = #{fechacalinicio,jdbcType=TIMESTAMP}");
		}
		if (row.getFechacalfin() != null) {
			sql.SET("FECHACALFIN = #{fechacalfin,jdbcType=TIMESTAMP}");
		}
		if (row.getEstado() != null) {
			sql.SET("ESTADO = #{estado,jdbcType=NUMERIC}");
		}
		if (row.getFechamodificacion() != null) {
			sql.SET("FECHAMODIFICACION = #{fechamodificacion,jdbcType=TIMESTAMP}");
		}
		if (row.getUsumodificacion() != null) {
			sql.SET("USUMODIFICACION = #{usumodificacion,jdbcType=NUMERIC}");
		}
		if (row.getIdficherocalendario() != null) {
			sql.SET("IDFICHEROCALENDARIO = #{idficherocalendario,jdbcType=NUMERIC}");
		}
		if (row.getObservaciones() != null) {
			sql.SET("OBSERVACIONES = #{observaciones,jdbcType=VARCHAR}");
		}
		if (row.getProcesandogeneracion() != null) {
			sql.SET("PROCESANDOGENERACION = #{procesandogeneracion,jdbcType=NUMERIC}");
		}
		if (row.getLogProgramacionName() != null) {
			sql.SET("LOG_PROGRAMACION_NAME = #{logProgramacionName,jdbcType=VARCHAR}");
		}
		if (row.getSoloGenerarVacio() != null) {
			sql.SET("SOLO_GENERAR_VACIO = #{soloGenerarVacio,jdbcType=CHAR}");
		}
		sql.WHERE("IDPROGCALENDARIO = #{idprogcalendario,jdbcType=NUMERIC}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table USCGAE_INT.SCS_PROG_CALENDARIOS
	 * @mbg.generated  Thu Nov 10 14:15:19 CET 2022
	 */
	protected void applyWhere(SQL sql, ScsProgCalendariosExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}

	public String updateProgCalendario(Short idconjuntoguardia, String idinstitucion, String fechaprogramacion, String fechacalinicio, String fechacalfin, String estado, String fechamodificacion, String usumodificacion, String idficherocalendario, String idprogcalendario,char soloGenerarVacio) {
		SQL sql = new SQL();
		sql.UPDATE("SCS_PROG_CALENDARIOS");
		if (idconjuntoguardia != null) {
			sql.SET("IDCONJUNTOGUARDIA = " + idconjuntoguardia);
		}
		if (idinstitucion != null) {
			sql.SET("IDINSTITUCION =  " + idinstitucion );
		}
		if (fechaprogramacion != null) {
			sql.SET("FECHAPROGRAMACION =  TO_DATE('" + fechaprogramacion + "' , 'dd/MM/yyyy HH24:mi:ss')");
		}
		if (fechacalinicio != null) {
			sql.SET("FECHACALINICIO = '" + fechacalinicio + "'");
		}
		if (fechacalfin != null) {
			sql.SET("FECHACALFIN =  '" + fechacalfin + "'");
		}
		if (estado != null) {
			sql.SET("ESTADO = " + estado);
		}
		if (idficherocalendario != null) {
			sql.SET("IDFICHEROCALENDARIO = " + idficherocalendario);
		}
		//Solo se actualiza en estado pendiente
		sql.SET("SOLO_GENERAR_VACIO = '" + soloGenerarVacio+"'");
		
		sql.WHERE("IDPROGCALENDARIO = " + idprogcalendario);
		return sql.toString();
	}
	
}