package org.itcgae.siga.db.mappers;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;
import org.itcgae.siga.db.entities.FcsPagoColegiado;
import org.itcgae.siga.db.entities.FcsPagoColegiadoExample;
import org.itcgae.siga.db.entities.FcsPagoColegiadoExample.Criteria;
import org.itcgae.siga.db.entities.FcsPagoColegiadoExample.Criterion;

public class FcsPagoColegiadoSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE.FCS_PAGO_COLEGIADO
     *
     * @mbg.generated Fri Dec 14 13:11:39 CET 2018
     */
    public String countByExample(FcsPagoColegiadoExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("FCS_PAGO_COLEGIADO");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE.FCS_PAGO_COLEGIADO
     *
     * @mbg.generated Fri Dec 14 13:11:39 CET 2018
     */
    public String deleteByExample(FcsPagoColegiadoExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("FCS_PAGO_COLEGIADO");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE.FCS_PAGO_COLEGIADO
     *
     * @mbg.generated Fri Dec 14 13:11:39 CET 2018
     */
    public String insertSelective(FcsPagoColegiado record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("FCS_PAGO_COLEGIADO");
        
        if (record.getIdinstitucion() != null) {
            sql.VALUES("IDINSTITUCION", "#{idinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdpagosjg() != null) {
            sql.VALUES("IDPAGOSJG", "#{idpagosjg,jdbcType=DECIMAL}");
        }
        
        if (record.getIdperorigen() != null) {
            sql.VALUES("IDPERORIGEN", "#{idperorigen,jdbcType=DECIMAL}");
        }
        
        if (record.getIdperdestino() != null) {
            sql.VALUES("IDPERDESTINO", "#{idperdestino,jdbcType=DECIMAL}");
        }
        
        if (record.getImpoficio() != null) {
            sql.VALUES("IMPOFICIO", "#{impoficio,jdbcType=DECIMAL}");
        }
        
        if (record.getImpasistencia() != null) {
            sql.VALUES("IMPASISTENCIA", "#{impasistencia,jdbcType=DECIMAL}");
        }
        
        if (record.getImpsoj() != null) {
            sql.VALUES("IMPSOJ", "#{impsoj,jdbcType=DECIMAL}");
        }
        
        if (record.getImpejg() != null) {
            sql.VALUES("IMPEJG", "#{impejg,jdbcType=DECIMAL}");
        }
        
        if (record.getImpmovvar() != null) {
            sql.VALUES("IMPMOVVAR", "#{impmovvar,jdbcType=DECIMAL}");
        }
        
        if (record.getImpirpf() != null) {
            sql.VALUES("IMPIRPF", "#{impirpf,jdbcType=DECIMAL}");
        }
        
        if (record.getImpret() != null) {
            sql.VALUES("IMPRET", "#{impret,jdbcType=DECIMAL}");
        }
        
        if (record.getIdcuenta() != null) {
            sql.VALUES("IDCUENTA", "#{idcuenta,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.VALUES("FECHAMODIFICACION", "#{fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.VALUES("USUMODIFICACION", "#{usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getPorcentajeirpf() != null) {
            sql.VALUES("PORCENTAJEIRPF", "#{porcentajeirpf,jdbcType=DECIMAL}");
        }
        
        if (record.getIdretencion() != null) {
            sql.VALUES("IDRETENCION", "#{idretencion,jdbcType=DECIMAL}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE.FCS_PAGO_COLEGIADO
     *
     * @mbg.generated Fri Dec 14 13:11:39 CET 2018
     */
    public String selectByExample(FcsPagoColegiadoExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("IDINSTITUCION");
        } else {
            sql.SELECT("IDINSTITUCION");
        }
        sql.SELECT("IDPAGOSJG");
        sql.SELECT("IDPERORIGEN");
        sql.SELECT("IDPERDESTINO");
        sql.SELECT("IMPOFICIO");
        sql.SELECT("IMPASISTENCIA");
        sql.SELECT("IMPSOJ");
        sql.SELECT("IMPEJG");
        sql.SELECT("IMPMOVVAR");
        sql.SELECT("IMPIRPF");
        sql.SELECT("IMPRET");
        sql.SELECT("IDCUENTA");
        sql.SELECT("FECHAMODIFICACION");
        sql.SELECT("USUMODIFICACION");
        sql.SELECT("PORCENTAJEIRPF");
        sql.SELECT("IDRETENCION");
        sql.FROM("FCS_PAGO_COLEGIADO");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE.FCS_PAGO_COLEGIADO
     *
     * @mbg.generated Fri Dec 14 13:11:39 CET 2018
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FcsPagoColegiado record = (FcsPagoColegiado) parameter.get("record");
        FcsPagoColegiadoExample example = (FcsPagoColegiadoExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("FCS_PAGO_COLEGIADO");
        
        if (record.getIdinstitucion() != null) {
            sql.SET("IDINSTITUCION = #{record.idinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdpagosjg() != null) {
            sql.SET("IDPAGOSJG = #{record.idpagosjg,jdbcType=DECIMAL}");
        }
        
        if (record.getIdperorigen() != null) {
            sql.SET("IDPERORIGEN = #{record.idperorigen,jdbcType=DECIMAL}");
        }
        
        if (record.getIdperdestino() != null) {
            sql.SET("IDPERDESTINO = #{record.idperdestino,jdbcType=DECIMAL}");
        }
        
        if (record.getImpoficio() != null) {
            sql.SET("IMPOFICIO = #{record.impoficio,jdbcType=DECIMAL}");
        }
        
        if (record.getImpasistencia() != null) {
            sql.SET("IMPASISTENCIA = #{record.impasistencia,jdbcType=DECIMAL}");
        }
        
        if (record.getImpsoj() != null) {
            sql.SET("IMPSOJ = #{record.impsoj,jdbcType=DECIMAL}");
        }
        
        if (record.getImpejg() != null) {
            sql.SET("IMPEJG = #{record.impejg,jdbcType=DECIMAL}");
        }
        
        if (record.getImpmovvar() != null) {
            sql.SET("IMPMOVVAR = #{record.impmovvar,jdbcType=DECIMAL}");
        }
        
        if (record.getImpirpf() != null) {
            sql.SET("IMPIRPF = #{record.impirpf,jdbcType=DECIMAL}");
        }
        
        if (record.getImpret() != null) {
            sql.SET("IMPRET = #{record.impret,jdbcType=DECIMAL}");
        }
        
        if (record.getIdcuenta() != null) {
            sql.SET("IDCUENTA = #{record.idcuenta,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.SET("FECHAMODIFICACION = #{record.fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.SET("USUMODIFICACION = #{record.usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getPorcentajeirpf() != null) {
            sql.SET("PORCENTAJEIRPF = #{record.porcentajeirpf,jdbcType=DECIMAL}");
        }
        
        if (record.getIdretencion() != null) {
            sql.SET("IDRETENCION = #{record.idretencion,jdbcType=DECIMAL}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE.FCS_PAGO_COLEGIADO
     *
     * @mbg.generated Fri Dec 14 13:11:39 CET 2018
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("FCS_PAGO_COLEGIADO");
        
        sql.SET("IDINSTITUCION = #{record.idinstitucion,jdbcType=DECIMAL}");
        sql.SET("IDPAGOSJG = #{record.idpagosjg,jdbcType=DECIMAL}");
        sql.SET("IDPERORIGEN = #{record.idperorigen,jdbcType=DECIMAL}");
        sql.SET("IDPERDESTINO = #{record.idperdestino,jdbcType=DECIMAL}");
        sql.SET("IMPOFICIO = #{record.impoficio,jdbcType=DECIMAL}");
        sql.SET("IMPASISTENCIA = #{record.impasistencia,jdbcType=DECIMAL}");
        sql.SET("IMPSOJ = #{record.impsoj,jdbcType=DECIMAL}");
        sql.SET("IMPEJG = #{record.impejg,jdbcType=DECIMAL}");
        sql.SET("IMPMOVVAR = #{record.impmovvar,jdbcType=DECIMAL}");
        sql.SET("IMPIRPF = #{record.impirpf,jdbcType=DECIMAL}");
        sql.SET("IMPRET = #{record.impret,jdbcType=DECIMAL}");
        sql.SET("IDCUENTA = #{record.idcuenta,jdbcType=DECIMAL}");
        sql.SET("FECHAMODIFICACION = #{record.fechamodificacion,jdbcType=TIMESTAMP}");
        sql.SET("USUMODIFICACION = #{record.usumodificacion,jdbcType=DECIMAL}");
        sql.SET("PORCENTAJEIRPF = #{record.porcentajeirpf,jdbcType=DECIMAL}");
        sql.SET("IDRETENCION = #{record.idretencion,jdbcType=DECIMAL}");
        
        FcsPagoColegiadoExample example = (FcsPagoColegiadoExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE.FCS_PAGO_COLEGIADO
     *
     * @mbg.generated Fri Dec 14 13:11:39 CET 2018
     */
    public String updateByPrimaryKeySelective(FcsPagoColegiado record) {
        SQL sql = new SQL();
        sql.UPDATE("FCS_PAGO_COLEGIADO");
        
        if (record.getIdperdestino() != null) {
            sql.SET("IDPERDESTINO = #{idperdestino,jdbcType=DECIMAL}");
        }
        
        if (record.getImpoficio() != null) {
            sql.SET("IMPOFICIO = #{impoficio,jdbcType=DECIMAL}");
        }
        
        if (record.getImpasistencia() != null) {
            sql.SET("IMPASISTENCIA = #{impasistencia,jdbcType=DECIMAL}");
        }
        
        if (record.getImpsoj() != null) {
            sql.SET("IMPSOJ = #{impsoj,jdbcType=DECIMAL}");
        }
        
        if (record.getImpejg() != null) {
            sql.SET("IMPEJG = #{impejg,jdbcType=DECIMAL}");
        }
        
        if (record.getImpmovvar() != null) {
            sql.SET("IMPMOVVAR = #{impmovvar,jdbcType=DECIMAL}");
        }
        
        if (record.getImpirpf() != null) {
            sql.SET("IMPIRPF = #{impirpf,jdbcType=DECIMAL}");
        }
        
        if (record.getImpret() != null) {
            sql.SET("IMPRET = #{impret,jdbcType=DECIMAL}");
        }
        
        if (record.getIdcuenta() != null) {
            sql.SET("IDCUENTA = #{idcuenta,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.SET("FECHAMODIFICACION = #{fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.SET("USUMODIFICACION = #{usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getPorcentajeirpf() != null) {
            sql.SET("PORCENTAJEIRPF = #{porcentajeirpf,jdbcType=DECIMAL}");
        }
        
        if (record.getIdretencion() != null) {
            sql.SET("IDRETENCION = #{idretencion,jdbcType=DECIMAL}");
        }
        
        sql.WHERE("IDINSTITUCION = #{idinstitucion,jdbcType=DECIMAL}");
        sql.WHERE("IDPAGOSJG = #{idpagosjg,jdbcType=DECIMAL}");
        sql.WHERE("IDPERORIGEN = #{idperorigen,jdbcType=DECIMAL}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE.FCS_PAGO_COLEGIADO
     *
     * @mbg.generated Fri Dec 14 13:11:39 CET 2018
     */
    protected void applyWhere(SQL sql, FcsPagoColegiadoExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}