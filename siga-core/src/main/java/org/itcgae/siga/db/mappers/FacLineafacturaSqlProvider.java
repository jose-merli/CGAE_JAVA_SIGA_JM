package org.itcgae.siga.db.mappers;

import org.apache.ibatis.jdbc.SQL;
import org.itcgae.siga.db.entities.FacLineafactura;
import org.itcgae.siga.db.entities.FacLineafacturaExample;
import org.itcgae.siga.db.entities.FacLineafacturaExample.Criteria;
import org.itcgae.siga.db.entities.FacLineafacturaExample.Criterion;

import java.util.List;
import java.util.Map;

public class FacLineafacturaSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.FAC_LINEAFACTURA
     *
     * @mbg.generated Tue Nov 30 16:24:03 CET 2021
     */
    public String countByExample(FacLineafacturaExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("FAC_LINEAFACTURA");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.FAC_LINEAFACTURA
     *
     * @mbg.generated Tue Nov 30 16:24:03 CET 2021
     */
    public String deleteByExample(FacLineafacturaExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("FAC_LINEAFACTURA");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.FAC_LINEAFACTURA
     *
     * @mbg.generated Tue Nov 30 16:24:03 CET 2021
     */
    public String insertSelective(FacLineafactura record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("FAC_LINEAFACTURA");
        
        if (record.getIdinstitucion() != null) {
            sql.VALUES("IDINSTITUCION", "#{idinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdfactura() != null) {
            sql.VALUES("IDFACTURA", "#{idfactura,jdbcType=VARCHAR}");
        }
        
        if (record.getNumerolinea() != null) {
            sql.VALUES("NUMEROLINEA", "#{numerolinea,jdbcType=DECIMAL}");
        }
        
        if (record.getNumeroorden() != null) {
            sql.VALUES("NUMEROORDEN", "#{numeroorden,jdbcType=DECIMAL}");
        }
        
        if (record.getCantidad() != null) {
            sql.VALUES("CANTIDAD", "#{cantidad,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.VALUES("FECHAMODIFICACION", "#{fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.VALUES("USUMODIFICACION", "#{usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getImporteanticipado() != null) {
            sql.VALUES("IMPORTEANTICIPADO", "#{importeanticipado,jdbcType=DECIMAL}");
        }
        
        if (record.getDescripcion() != null) {
            sql.VALUES("DESCRIPCION", "#{descripcion,jdbcType=VARCHAR}");
        }
        
        if (record.getPreciounitario() != null) {
            sql.VALUES("PRECIOUNITARIO", "#{preciounitario,jdbcType=DECIMAL}");
        }
        
        if (record.getIva() != null) {
            sql.VALUES("IVA", "#{iva,jdbcType=DECIMAL}");
        }
        
        if (record.getCtaproductoservicio() != null) {
            sql.VALUES("CTAPRODUCTOSERVICIO", "#{ctaproductoservicio,jdbcType=VARCHAR}");
        }
        
        if (record.getCtaiva() != null) {
            sql.VALUES("CTAIVA", "#{ctaiva,jdbcType=VARCHAR}");
        }
        
        if (record.getIdformapago() != null) {
            sql.VALUES("IDFORMAPAGO", "#{idformapago,jdbcType=DECIMAL}");
        }
        
        if (record.getIdtipoiva() != null) {
            sql.VALUES("IDTIPOIVA", "#{idtipoiva,jdbcType=DECIMAL}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.FAC_LINEAFACTURA
     *
     * @mbg.generated Tue Nov 30 16:24:03 CET 2021
     */
    public String selectByExample(FacLineafacturaExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("IDINSTITUCION");
        } else {
            sql.SELECT("IDINSTITUCION");
        }
        sql.SELECT("IDFACTURA");
        sql.SELECT("NUMEROLINEA");
        sql.SELECT("NUMEROORDEN");
        sql.SELECT("CANTIDAD");
        sql.SELECT("FECHAMODIFICACION");
        sql.SELECT("USUMODIFICACION");
        sql.SELECT("IMPORTEANTICIPADO");
        sql.SELECT("DESCRIPCION");
        sql.SELECT("PRECIOUNITARIO");
        sql.SELECT("IVA");
        sql.SELECT("CTAPRODUCTOSERVICIO");
        sql.SELECT("CTAIVA");
        sql.SELECT("IDFORMAPAGO");
        sql.SELECT("IDTIPOIVA");
        sql.FROM("FAC_LINEAFACTURA");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.FAC_LINEAFACTURA
     *
     * @mbg.generated Tue Nov 30 16:24:03 CET 2021
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FacLineafactura record = (FacLineafactura) parameter.get("record");
        FacLineafacturaExample example = (FacLineafacturaExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("FAC_LINEAFACTURA");
        
        if (record.getIdinstitucion() != null) {
            sql.SET("IDINSTITUCION = #{record.idinstitucion,jdbcType=DECIMAL}");
        }
        
        if (record.getIdfactura() != null) {
            sql.SET("IDFACTURA = #{record.idfactura,jdbcType=VARCHAR}");
        }
        
        if (record.getNumerolinea() != null) {
            sql.SET("NUMEROLINEA = #{record.numerolinea,jdbcType=DECIMAL}");
        }
        
        if (record.getNumeroorden() != null) {
            sql.SET("NUMEROORDEN = #{record.numeroorden,jdbcType=DECIMAL}");
        }
        
        if (record.getCantidad() != null) {
            sql.SET("CANTIDAD = #{record.cantidad,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.SET("FECHAMODIFICACION = #{record.fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.SET("USUMODIFICACION = #{record.usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getImporteanticipado() != null) {
            sql.SET("IMPORTEANTICIPADO = #{record.importeanticipado,jdbcType=DECIMAL}");
        }
        
        if (record.getDescripcion() != null) {
            sql.SET("DESCRIPCION = #{record.descripcion,jdbcType=VARCHAR}");
        }
        
        if (record.getPreciounitario() != null) {
            sql.SET("PRECIOUNITARIO = #{record.preciounitario,jdbcType=DECIMAL}");
        }
        
        if (record.getIva() != null) {
            sql.SET("IVA = #{record.iva,jdbcType=DECIMAL}");
        }
        
        if (record.getCtaproductoservicio() != null) {
            sql.SET("CTAPRODUCTOSERVICIO = #{record.ctaproductoservicio,jdbcType=VARCHAR}");
        }
        
        if (record.getCtaiva() != null) {
            sql.SET("CTAIVA = #{record.ctaiva,jdbcType=VARCHAR}");
        }
        
        if (record.getIdformapago() != null) {
            sql.SET("IDFORMAPAGO = #{record.idformapago,jdbcType=DECIMAL}");
        }
        
        if (record.getIdtipoiva() != null) {
            sql.SET("IDTIPOIVA = #{record.idtipoiva,jdbcType=DECIMAL}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.FAC_LINEAFACTURA
     *
     * @mbg.generated Tue Nov 30 16:24:03 CET 2021
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("FAC_LINEAFACTURA");
        
        sql.SET("IDINSTITUCION = #{record.idinstitucion,jdbcType=DECIMAL}");
        sql.SET("IDFACTURA = #{record.idfactura,jdbcType=VARCHAR}");
        sql.SET("NUMEROLINEA = #{record.numerolinea,jdbcType=DECIMAL}");
        sql.SET("NUMEROORDEN = #{record.numeroorden,jdbcType=DECIMAL}");
        sql.SET("CANTIDAD = #{record.cantidad,jdbcType=DECIMAL}");
        sql.SET("FECHAMODIFICACION = #{record.fechamodificacion,jdbcType=TIMESTAMP}");
        sql.SET("USUMODIFICACION = #{record.usumodificacion,jdbcType=DECIMAL}");
        sql.SET("IMPORTEANTICIPADO = #{record.importeanticipado,jdbcType=DECIMAL}");
        sql.SET("DESCRIPCION = #{record.descripcion,jdbcType=VARCHAR}");
        sql.SET("PRECIOUNITARIO = #{record.preciounitario,jdbcType=DECIMAL}");
        sql.SET("IVA = #{record.iva,jdbcType=DECIMAL}");
        sql.SET("CTAPRODUCTOSERVICIO = #{record.ctaproductoservicio,jdbcType=VARCHAR}");
        sql.SET("CTAIVA = #{record.ctaiva,jdbcType=VARCHAR}");
        sql.SET("IDFORMAPAGO = #{record.idformapago,jdbcType=DECIMAL}");
        sql.SET("IDTIPOIVA = #{record.idtipoiva,jdbcType=DECIMAL}");
        
        FacLineafacturaExample example = (FacLineafacturaExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.FAC_LINEAFACTURA
     *
     * @mbg.generated Tue Nov 30 16:24:03 CET 2021
     */
    public String updateByPrimaryKeySelective(FacLineafactura record) {
        SQL sql = new SQL();
        sql.UPDATE("FAC_LINEAFACTURA");
        
        if (record.getNumeroorden() != null) {
            sql.SET("NUMEROORDEN = #{numeroorden,jdbcType=DECIMAL}");
        }
        
        if (record.getCantidad() != null) {
            sql.SET("CANTIDAD = #{cantidad,jdbcType=DECIMAL}");
        }
        
        if (record.getFechamodificacion() != null) {
            sql.SET("FECHAMODIFICACION = #{fechamodificacion,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUsumodificacion() != null) {
            sql.SET("USUMODIFICACION = #{usumodificacion,jdbcType=DECIMAL}");
        }
        
        if (record.getImporteanticipado() != null) {
            sql.SET("IMPORTEANTICIPADO = #{importeanticipado,jdbcType=DECIMAL}");
        }
        
        if (record.getDescripcion() != null) {
            sql.SET("DESCRIPCION = #{descripcion,jdbcType=VARCHAR}");
        }
        
        if (record.getPreciounitario() != null) {
            sql.SET("PRECIOUNITARIO = #{preciounitario,jdbcType=DECIMAL}");
        }
        
        if (record.getIva() != null) {
            sql.SET("IVA = #{iva,jdbcType=DECIMAL}");
        }
        
        if (record.getCtaproductoservicio() != null) {
            sql.SET("CTAPRODUCTOSERVICIO = #{ctaproductoservicio,jdbcType=VARCHAR}");
        }
        
        if (record.getCtaiva() != null) {
            sql.SET("CTAIVA = #{ctaiva,jdbcType=VARCHAR}");
        }
        
        if (record.getIdformapago() != null) {
            sql.SET("IDFORMAPAGO = #{idformapago,jdbcType=DECIMAL}");
        }
        
        if (record.getIdtipoiva() != null) {
            sql.SET("IDTIPOIVA = #{idtipoiva,jdbcType=DECIMAL}");
        }
        
        sql.WHERE("IDINSTITUCION = #{idinstitucion,jdbcType=DECIMAL}");
        sql.WHERE("IDFACTURA = #{idfactura,jdbcType=VARCHAR}");
        sql.WHERE("NUMEROLINEA = #{numerolinea,jdbcType=DECIMAL}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USCGAE_INT.FAC_LINEAFACTURA
     *
     * @mbg.generated Tue Nov 30 16:24:03 CET 2021
     */
    protected void applyWhere(SQL sql, FacLineafacturaExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}